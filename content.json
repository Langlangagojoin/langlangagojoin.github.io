{"pages":[{"title":"留言板？","text":"留下点什么让博主不孤单……","link":"/messages/index.html"}],"posts":[{"title":"你好，朋友","text":"终于，与你见面了呢 博客之行再次启程…… 以下为成文模板front-matter12345678910111213141516---title: 你好，朋友date: 2020-08-14 10:26:43tags:- 博客- 说说categories:- 杂谈toc: truethumbnail: https://cdn.jsdelivr.net/gh/langlangagojoin/img/img/hummingbird-5477966_1920.jpgplugins: mathjax: true gallery: true--- MathJax12345&lt;dir&gt;$$\\dbinom{n}{m} = \\dbinom{n-1}{m} + \\dbinom{n-1}{m-1}$$&lt;/dir&gt; $$ \\dbinom{n}{m} = \\dbinom{n-1}{m} + \\dbinom{n-1}{m-1} $$ button123456&lt;div class=\"buttons\"&gt; &lt;button class=\"button is-info\"&gt;Info&lt;/button&gt; &lt;button class=\"button is-success\"&gt;Success&lt;/button&gt; &lt;button class=\"button is-warning\"&gt;Warning&lt;/button&gt; &lt;button class=\"button is-danger\"&gt;Danger&lt;/button&gt;&lt;/div&gt; Info Success Warning Danger 使用范例12345678910111213141516&lt;button class=\"button is-info\" onclick=\"showHitokoto(event)\"&gt;显示一言&lt;/button&gt;&lt;blockquote class=\"hitokoto\"&gt;↑↑↑ 试着点击“显示一言”！&lt;/blockquote&gt;&lt;script&gt;function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } });}&lt;/script&gt; 显示一言 点击“显示一言” function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } }); } 进度条12345&lt;progress class=\"progress is-info\" value=\"20\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-success\" value=\"40\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-warning\" value=\"60\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-danger\" value=\"80\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-info\" max=\"100\"&gt;&lt;/progress&gt; 标签页12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;div class=\"tabs is-toggle\"&gt;&lt;ul&gt;&lt;li class=\"is-active\"&gt;&lt;a onclick=\"onTabClick(event)\"&gt;&lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-image\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Pictures&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=\"onTabClick(event)\"&gt;&lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-music\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Music&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=\"onTabClick(event)\"&gt;&lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-film\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Videos&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=\"onTabClick(event)\"&gt;&lt;span class=\"icon is-small\"&gt;&lt;i class=\"far fa-file-alt\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Documents&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;{% raw %}&lt;div id=\"Pictures\" class=\"tab-content\" style=\"display: block;\"&gt;{% endraw %}[Pixabay](https://pixabay.com/zh/) 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材...{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=\"Music\" class=\"tab-content\"&gt;{% endraw %}[网易云音乐](https://music.163.com/) 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=\"Videos\" class=\"tab-content\"&gt;{% endraw %}[哔哩哔哩](https://www.bilibili.com/) 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。{% raw %}&lt;/div&gt;{% endraw %}{% raw %}&lt;div id=\"Documents\" class=\"tab-content\"&gt;{% endraw %}[石墨文档](https://shimo.im/) 是全新一代云 Office 办公软件,支持多人在线协作编辑文档和表格,独有内容级安全,全过程留痕可追溯。PC 端和移动端全覆盖,随时随地远程办公。即写即存...{% raw %}&lt;/div&gt;{% endraw %}&lt;style type=\"text/css\"&gt;.content .tabs ul { margin: 0; }.tab-content { display: none; }&lt;/style&gt;&lt;script&gt;function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active');}&lt;/script&gt; Pictures Music Videos Documents Pixabay 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材… 网易云音乐 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。 哔哩哔哩 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。 石墨文档 是全新一代云 Office 办公软件,支持多人在线协作编辑文档和表格,独有内容级安全,全过程留痕可追溯。PC 端和移动端全覆盖,随时随地远程办公。即写即存… .content .tabs ul { margin: 0; } .tab-content { display: none; } function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active'); } 色彩突出No.1123{% raw %}&lt;div class=\"notification is-info\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主 123{% raw %}&lt;div class=\"notification is-success\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主 123{% raw %}&lt;div class=\"notification is-warning\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主 123{% raw %}&lt;div class=\"notification is-danger\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;{% endraw %} Icarus 主题以白色的简洁为主 No.2123{% raw %}&lt;article class=\"message is-info\"&gt;&lt;div class=\"message-body\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主 123{% raw %}&lt;article class=\"message is-success\"&gt;&lt;div class=\"message-body\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主 123{% raw %}&lt;article class=\"message is-warning\"&gt;&lt;div class=\"message-body\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主 123{% raw %}&lt;article class=\"message is-danger\"&gt;&lt;div class=\"message-body\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} Icarus 主题以白色的简洁为主 No.312345{% raw %}&lt;article class=\"message is-info\"&gt;&lt;div class=\"message-header\"&gt;{% endraw %}活用 Bulma 美化 Icarus 文章{% raw %}&lt;/div&gt;&lt;div class=\"message-body\"&gt;{% endraw %}[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主{% raw %}&lt;/div&gt;&lt;/article&gt;{% endraw %} 活用 Bulma 美化 Icarus 文章 Icarus 主题以白色的简洁为主 No.4123456&lt;article class=\"message message-immersive is-danger\"&gt;&lt;div class=\"message-body\"&gt;&lt;i class=\"fas fa-exclamation-triangle mr-2\"&gt;&lt;/i&gt;danger!&lt;/div&gt;&lt;/article&gt; danger! No.5 图标123456&lt;i class=\"fas fa-lightbulb mr-2\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-globe-asia mr-2\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-clock mr-2\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-info-circle mr-2\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-question-circle mr-2\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-exclamation-triangle mr-2\"&gt;&lt;/i&gt; 你知道的太多了1234567{% raw %}&lt;style type=\"text/css\"&gt;.heimu { color: #000; background-color: #000; }.heimu:hover { color: #fff; }&lt;/style&gt;{% endraw %}{% raw %}&lt;span class=\"heimu\"&gt;不是&lt;/span&gt;{% endraw %}dd .heimu { color: #000; background-color: #000; } .heimu:hover { color: #fff; } 不是dd 让简介不出现在正文123456789101112131415这里的内容会出现在 **简介和正文**{% raw %}&lt;div class=\"post-summary\"&gt;{% endraw %}这里的内容只会出现在 **简介**{% raw %}&lt;/div&gt;{% endraw %}&lt;!-- more --&gt;&lt;style type=\"text/css\"&gt;.post-summary { display: none; }&lt;/style&gt;这里的内容只会出现在 **正文** 来源声明12345678&lt;a class=\"tag is-dark is-medium\" href=\"https://www.imaegoo.com/\" target=\"_blank\"&gt;&lt;span class=\"icon\"&gt;&lt;i class=\"fas fa-lightbulb mr-2\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;感谢iMaeGoo&lt;/a&gt;&lt;a class=\"tag is-dark is-medium\" href=\"https://big-news.cn/\" target=\"_blank\"&gt;&lt;span class=\"icon\"&gt;&lt;i class=\"fas fa-lightbulb mr-2\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;感谢冯神&lt;/a&gt; &nbsp;&nbsp; 感谢iMaeGoo &nbsp;&nbsp; 感谢冯神","link":"/2020/08/14/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E6%9C%8B%E5%8F%8B/"},{"title":"浅谈网络流","text":"此文未完结，需进行后续更新，且此文存在练手的意图，存在错误请指出。 进度如下： 我告诉你们，学什么网络流啊，学什么算法啊，一点用都没有。——某不知名金牌教练（gou） .post-summary { display: none; } 以前觉得这玩意儿很高大上，学了之后才发现也只不过是个朴素的工具罢了。 啥是网络流？网络一个网络$G=(V,E)$是一张有向图，图中的每条边都存在一个容量$c(x,y)$（即这条边所能承载的最大流量），若$(x,y) \\not\\in E$，则$c(x,y)=0$。图中存在两个特殊节点$S$和$T$（$S!=T$），分别被称作源点和汇点。 如图： 网络的流函数定义实数函数$f(x,y)$，保证$x \\in V,y \\in V$，满足： $f(x,y)\\leqslant c(x,y)$（容量限制） $f(x,y)=-f(y,x)$（斜对称） $\\forall x \\not= S,x\\not=T , \\sum_{(u,x) \\in E}f(u,x)=\\sum_{(x,v)\\in E}f(x,v)$（流量守恒） 则称此函数为该网络的流函数。 $f(x,y)$则被称为是边$(x,y)\\in E$的流量，则$c(x,y)-f(x,y)$被称为边$(x,y)\\in E$的剩余容量。 进而很容易看出，$\\sum_{(S,v)\\in E}f(S,v)$可被称为是整个网络的流量。 到这里我们可以形象地描述网络流： 有一个水源$S$，和一个黑洞般的下水道$T$（233，从源头流出水，在不超过水管容量的前提下，水流经水管网络，最终汇聚于下水道。 值得注意的是，按照流函数的定义，每条边将存在一条反向边（实际图中并不存在，因此初始容量为$0$），其反向边流量等于其流量的相反数。 我们以$f(x,y)/c(x,y)$的形式对上图标注流量（黄色的即为反向边）： 可以看到，此流法最终一共流了$45+10=55$ 最大流对于一个网络$G=(V,E)$，最大的$\\sum_{(S,v)\\in E}f(S,v)$被称为是网络的最大流量，而使得整个网络的流量满足网络的最大流量的流函数被称为网络的最大流。 求网络的最大流量的算法有许多，可惜本博主只会EK（$\\mathtt{Edmonds-Karp}$增广路算法）和dinic，不过已经够用了。 我将依次进行介绍： Edmonds-Karp增广路算法首先需要介绍增广路的概念 增广路 若一条从源点$S$到汇点$T$的路径上各个边的剩余容量都大于$0$，则称这条路径为一条增广路。 EK算法的思路即不断用BFS寻找增广路，直到网络上不存在增广路为止。 .heimu { color: #000; background-color: #000; } .heimu:hover { color: #fff; } 我知道这样说起来稍微有点玄，对于像我这样的菜鸡确实有些不友好。但是请不要放弃，认真看下去慢慢就会懂。 小编相信BFS大家都知道是什么，就不在此多说。 现在先说说寻找增广路的过程，每次从源点$S$开始BFS不断拓展，只考虑目前剩余容量$c(x,y)-f(x,y)&gt;0$的边，直到到达汇点$T$，即找到一条增广路，寻找的过程中同时记录此增广路各边剩余容量的最小值$minf$，最后将其加入答案，并将此增广路中各边的剩余容量$-minf$。 这时有同学定会开始对上图进行模拟了，照上面博主给出的方法，可能会发现这样一种情况： 等等，这显然不是最优解啊？最优解应该是： 怎么回事，难道是博主先前都在放屁？ 停，给我把棍子放下，先听我说。 有趣的来了，还记得之前提到过的每条边的反向边吗？ 对反向边的处理我们先尝试给每条边$(x,y)\\in E$加上一条反向边$(y,x)$，由于此边实际并不存在，因此$c(y,x)=0$。如图， 然后对此图进行上面博主介绍的寻找增广路的过程。 其中注意根据$f(x,y)=-f(y,x)$（斜对称），处理正向边时，同时处理反向边的流函数。 模拟 下面是模拟过程，我们以$f(x,y)/c(x,y)$的形式对模拟过程图标注流量，其中剩余容量$=c(x,y)-f(x,y)$ 1 2 3 4 5 $S \\longrightarrow 1 \\longrightarrow 3 \\longrightarrow T$ $ans=10$ $S \\longrightarrow 1 \\longrightarrow 3 \\longrightarrow T$ $S \\longrightarrow 2 \\longrightarrow 3 \\longrightarrow T$ $ans=45$ $S \\longrightarrow 1 \\longrightarrow 3 \\longrightarrow T$ $S \\longrightarrow 2 \\longrightarrow 3 \\longrightarrow T$ $S \\longrightarrow 2 \\longrightarrow 3 \\longrightarrow 1 \\longrightarrow T$ $ans=55$ 发现没有增广路，直接返回$ans=55$。 .content .tabs ul { margin: 0; } .tab-content { display: none; } function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active'); } 通过模拟的过程我们可以清晰地看到，在第四步时，“流”根据$c(x,y)-f(x,y)&gt;0$的原则通过了一条反向边$(3,1)$，成功又找到一条增广路并对该增广路上的正向边和反向边的剩余容量分别更新。 由此我们可以知道，反向边的作用形象地来讲，就是给该反向边对应的边一个反悔的机会，以此保证整张网络的流量在找不到增广路的情况下最大。 复杂度$O(nm^2)$，可有效处理$10^3 $~$10^4$规模的网络。 当然，这还不是很优秀，每次寻找可能会遍历整张（残量）网络，却只找到一条增广路，这是不合算的，还有进一步优化的空间。 其他需要注意的存边时，可以使用邻接表的“成对存储”技巧，将每条有向边和其反向边分别存储在$2x,(x\\in[1,+\\infty])$和$2x+1$中。 调用时使用[i]和[i^1]即可。 Code &nbsp;&nbsp; 题目来自Luogu 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#define int long longconst int maxn=5e3+10;const int INF=0X7FFFFFFFFFFFFFFF;struct Edge{ int to,next,w;//.w为剩余容量}edge[maxn&lt;&lt;1];int n,m,s,t,dis[maxn],pre[maxn],ans,flag[201][201];int cnt,head[maxn];bool vis[maxn];std::queue&lt;int&gt; q;int read(){ char ch=getchar();int x=0,f=1; while(ch&gt;'9'||ch&lt;'0'){if(ch=='-')f=-1;ch=getchar();} while(ch&lt;='9'&amp;&amp;ch&gt;='0'){x=x*10+ch-'0';ch=getchar();} return x*f;}inline void add(int x,int y,int w){ edge[++cnt]=(Edge){y,head[x],w}; head[x]=cnt; return ;}bool bfs(){ while(!q.empty()) q.pop(); memset(vis,false,sizeof(vis)); vis[s]=true; dis[s]=INF;//增广路上各边最小剩余容量 q.push(s); while(!q.empty()){ register int x=q.front(); q.pop(); for(register int i=head[x];i;i=edge[i].next){ register int y=edge[i].to,w=edge[i].w; if(!w||vis[y]) continue; dis[y]=std::min(dis[x],w); pre[y]=i;//记录前驱，方便进行修改 q.push(y); vis[y]=true; if(y==t) return true;//找到一条增广路 } } return false;}void update(){ ans+=dis[t]; int x=t; while(x!=s){ edge[ pre[x] ].w-=dis[t]; edge[ pre[x]^1 ].w+=dis[t];//利用“成对存储”技巧访问边 x=edge[ pre[x]^1 ].to; } return ;}signed main(){ n=read(),m=read(),s=read(),t=read(); cnt=1; for(register int i=1;i&lt;=m;i++){ register int x=read(),y=read(),w=read(); if(!flag[x][y]){//对重边进行优化 add(x,y,w),add(y,x,0);//反向边剩余容量为0 flag[x][y]=cnt; }else{ edge[ flag[x][y]^1 ].w+=w; } } while(bfs()){//不断寻找增广路 update();//更新答案、正向边、反向边 } std::cout&lt;&lt;ans; return 0;} Dinic首先介绍残量网络和分层图的概念 残量网络 分层图 残量网络 在任意时刻，网络中所有节点以及剩余容量大于$0$的边构成的子图被称为残量网络。 节点的层次：$d[x]$，表示$S$到$x$最少需要经过的边数。 分层图 在残量网络中，满足$d[y]=d[x]+1$的边$(x,y)$构成的子图被称为分层图。 分层图显然是一张有向无环图。 .content .tabs ul { margin: 0; } .tab-content { display: none; } function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active'); } Dinic 算法 不断反复实行以下两个步骤，直到在残量网络中$S$不能到达$T$（当$T$在分层图中没有深度时，$S$自然不能到达$T$）： 在残量网络上BFS，求出节点的层次$d[x]$，构造分层图。 紧接着，在分层图上进行DFS寻找增广路，在回溯时更新边的剩余容量和节点的剩余流。显然，每个节点在剩余流足够的前提下允许流向多条出边。 这样，每次重复上面两个步骤，允许同时找到多条增广路，大大缩短了程序运行的时间。 复杂度Dinic的时间复杂度为$O(n^2m)$，可有效处理$10^4$~$10^5$规模的网络。 Code 代码中存在剪枝，请看注释。 &nbsp;&nbsp; 题目来自Luogu 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;cstring&gt;#define int long longconst int maxn=5e3+10;const int INF=0X7FFFFFFFFFFFFFFF;struct Edge{ int to,next,w;}edge[maxn&lt;&lt;1];int n,m,s,t,flag[201][201],ans,depth[maxn];int cnt,head[maxn];std::queue&lt;int&gt; q;int read(){ char ch=getchar();int x=0,f=1; while(ch&gt;'9'||ch&lt;'0'){if(ch=='-')f=-1;ch=getchar();} while(ch&lt;='9'&amp;&amp;ch&gt;='0'){x=x*10+ch-'0';ch=getchar();} return x*f;}inline void add(int x,int y,int w){ edge[++cnt]=(Edge){y,head[x],w}; head[x]=cnt; return ;}bool bfs(){//在残量网络上构造分层图 memset(depth,0,sizeof(depth)); while(!q.empty()) q.pop(); depth[s]=1;//源点层次为1 q.push(s); while(!q.empty()){ int x=q.front(); q.pop(); for(register int i=head[x];i;i=edge[i].next){ int y=edge[i].to,w=edge[i].w; if(depth[y]||!w) continue; depth[y]=depth[x]+1; q.push(y); if(y==t) return true;//若能到达T 返回true } } return false;}int dinic(int x,int flow){//在当前分层图上寻找增广路 if(x==t) return flow;//若到达T 直接返回全部 register int rest=flow,k; for(register int i=head[x];i;i=edge[i].next){ int y=edge[i].to,w=edge[i].w; if(depth[y]!=depth[x]+1||!w) continue; k=dinic(y,std::min(rest,w)); if(!k) depth[y]=0;//剪枝，去掉增广完毕的点 else{ edge[i].w-=k;//更新该边剩余容量 edge[i^1].w+=k;//更新该边的反向边的剩余容量 rest-=k;//更新节点的剩余流 if(rest==0) return flow;//剪枝，若剩余流为0，说明全部流完，直接返回全部 } } return flow-rest;//返回 全部流来的-剩余的流}signed main(){ cnt=1; n=read(),m=read(),s=read(),t=read(); for(register int i=1;i&lt;=m;i++){ register int x=read(),y=read(),w=read(); if(!flag[x][y]){//合并重边 add(x,y,w),add(y,x,0); flag[x][y]=cnt; }else{ edge[ flag[x][y]^1 ].w+=w; } } register int flow=0; while(bfs()){//若能到达汇点 while(flow=dinic(s,INF)){//源点S的流是无限的 ans+=flow; } } std::cout&lt;&lt;ans; return 0;}","link":"/2020/08/15/%E6%B5%85%E8%B0%88%E7%BD%91%E7%BB%9C%E6%B5%81/"}],"tags":[{"name":"说说","slug":"说说","link":"/tags/%E8%AF%B4%E8%AF%B4/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"网络流","slug":"网络流","link":"/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"dinic","slug":"dinic","link":"/tags/dinic/"},{"name":"EK","slug":"EK","link":"/tags/EK/"},{"name":"Edmonds-Karp","slug":"Edmonds-Karp","link":"/tags/Edmonds-Karp/"},{"name":"二分图","slug":"二分图","link":"/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"},{"name":"最大匹配","slug":"最大匹配","link":"/tags/%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"},{"name":"最大流","slug":"最大流","link":"/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"}],"categories":[{"name":"杂谈","slug":"杂谈","link":"/categories/%E6%9D%82%E8%B0%88/"},{"name":"OI","slug":"OI","link":"/categories/OI/"},{"name":"Hexo","slug":"杂谈/Hexo","link":"/categories/%E6%9D%82%E8%B0%88/Hexo/"},{"name":"笔记","slug":"OI/笔记","link":"/categories/OI/%E7%AC%94%E8%AE%B0/"}]}